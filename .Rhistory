train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
summary(full_model)
View(train.df)
library(pROC)
library(caret)
train.df = read.csv("data/train_data_4r.csv")
set.seed(123)
ctrl <- trainControl(
method = "cv",       # 交叉验证
number = 5,          # 5折交叉验证
summaryFunction = twoClassSummary,  # 使用二分类模型的多种评估指标
classProbs = TRUE,   # 计算概率值，用于AUC
savePredictions = "final"  # 保存每折的预测结果
)
model <- train(
stroke ~ .,   # 公式
data = train.df,           # 数据集
method = "glm",        # 使用逻辑回归
family = "binomial",   # 指定逻辑回归的家庭（binomial）
trControl = ctrl,      # 设置交叉验证控制
metric = "ROC"         # 设置AUC为评估指标
)
print(model)
library(car)
vif(full_model)
install.packages("writexl")
library(xtable)
install.packages("xtable")
install.packages("flextable")
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = xtable_to_flextable(xtable(sum1))
library(xtable)
library(flextable)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = xtable_to_flextable(xtable(sum1))
xtable_to_flextable()
install.packages("officer")
install.packages("officer")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = xtable_to_flextable(xtable(sum1))
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = as_flextable(xtable(sum1))
doc = body_add_flextable(doc, m1)
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = as_flextable(xtable(sum1))
doc = read_docx()
doc = body_add_flextable(doc, m1)
print(doc,"d:/m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sum1 = summary(full_model)
m1 = as_flextable(xtable(sum1))
doc = read_docx()
doc = body_add_flextable(doc, m1)
print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
sink("glm_summary.txt")
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# sink("glm_summary.txt")
options(width = 150)
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# sink("glm_summary.txt")
options(width = 150)
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# sink("glm_summary.txt")
options(width = 1500)
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# sink("glm_summary.txt")
# options(width = 1500)
summary(full_model)
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# sink("glm_summary.txt")
# options(width = 1500)
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
# without SMOTE
train_no_smote.df = read.csv("data/train_data_4r_no_smote.csv")
train_no_smote.df$stroke<-ifelse(train_no_smote.df$stroke=="Yes",1,0)
model_without_smote = glm(stroke ~ ., train_no_smote.df, family='binomial')
summary(model_without_smote)
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# options(width = 1500)
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# options(width = 1500)
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# options(width = 1500)
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
sink()
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# options(width = 1500)
sink()
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
# options(width = 1500)
# sink()
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
options(width = 1500)
print(summary(full_model))
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
options(width = 1500)
sink("glm_summary.txt")
summary(full_model)
sink()
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
options(width = 1500)
# sink("glm_summary.txt")
summary(full_model)
# sink()
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
step(full_model, k=2, direction="backward")
train.df$stroke<-ifelse(train.df$stroke=="yes",1,0)
model_selected = glm(stroke ~ gender + age + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + smoking_status, train.df, family='binomial')
summary(model_selected)
train.df$stroke<-ifelse(train.df$stroke=="yes",1,0)
model_selected = glm(stroke ~ gender + age + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + smoking_status, data=train.df, family='binomial')
summary(model_selected)
train.df = read.csv("data/train_data_4r.csv")
model <- train(
stroke ~ gender + age + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + smoking_status,   # 公式
data = train.df,           # 数据集
method = "glm",        # 使用逻辑回归
family = "binomial",   # 指定逻辑回归的家庭（binomial）
trControl = ctrl,      # 设置交叉验证控制
metric = "ROC"         # 设置AUC为评估指标
)
train.df = read.csv("data/train_data_4r.csv")
model <- train(
stroke ~ gender + age + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + smoking_status,   # 公式
data = train.df,           # 数据集
method = "glm",        # 使用逻辑回归
family = "binomial",   # 指定逻辑回归的家庭（binomial）
trControl = ctrl,      # 设置交叉验证控制
metric = "ROC"         # 设置AUC为评估指标
)
library(xtable)
library(flextable)
library(officer)
# with SMOTE
train.df = read.csv("data/train_data_4r.csv")
train.df$stroke<-ifelse(train.df$stroke=="Yes",1,0)
full_model = glm(stroke ~ ., train.df, family='binomial')
options(width = 1500)
# sink("glm_summary.txt")
summary(full_model)
# sink()
# sum1 = summary(full_model)
# m1 = as_flextable(xtable(sum1))
# doc = read_docx()
# doc = body_add_flextable(doc, m1)
# print(doc,"m1.docx")
View(train.df)
library(car)
vif(full_model)
step(full_model, k=2, direction="backward")
model_selected = glm(stroke ~ gender + age + heart_disease + ever_married +
work_type + Residence_type + avg_glucose_level + smoking_status, data=train.df, family='binomial')
summary(model_selected)
step(full_model, k=log(n), direction="backward")
n = nrow(train.df)
step(full_model, k=log(n), direction="backward")
model_selected = glm(stroke ~ gender + age + heart_disease + ever_married +
work_type + avg_glucose_level + smoking_status, data=train.df, family='binomial')
summary(model_selected)
install.packages("bestglm")
library(bestglm)
best_model <- bestglm(train.df,
family = binomial,  # 指定逻辑回归
IC = "AIC")         # 信息准则选择变量
library(MASS)
null_model = glm(stroke ~ `, data=train.df, family=binomial)
n = nrow(train.df)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ `, data=train.df, family=binomial)
# n = nrow(train.df)
# stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
# n = nrow(train.df)
# stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
# n = nrow(train.df)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
summary(stepwise_model)
# n = nrow(train.df)
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "backward")
summary(stepwise_model)
# n = nrow(train.df)
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "forward")
summary(stepwise_model)
# n = nrow(train.df)
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
stepwise_model <- stepAIC(full_model, scope = list(lower = null_model, upper = full_model), direction = "forward")
summary(stepwise_model)
# n = nrow(train.df)
# step(full_model, k=log(n), direction="backward")
library(MASS)
null_model = glm(stroke ~ 1, data=train.df, family=binomial)
stepwise_model <- stepAIC(null_model, scope = list(lower = null_model, upper = full_model), direction = "both")
summary(stepwise_model)
# n = nrow(train.df)
# step(full_model, k=log(n), direction="backward")
table(train.df$stroke)
test.df = read.csv("data/test_data_4r.csv")
library(caret)
View(test.df)
test.df = read.csv("data/test_data_4r.csv")
library(caret)
train.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true)
table(test.df$stroke)
80/1198
56/80
313/1198
313/1198885/1198
313/1198885/1198
313/1198
885/1198
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true, positive="T")
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true, positive="TRUE")
60/89
install.packages("pROC")
install.packages("pROC")
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true, positive="TRUE")
roc_obj <- roc(y_true, y_pred)
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
roc_obj <- roc(y_true, y_pred)
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
roc_obj <- roc(y_true, predictions)
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true, positive="TRUE")
auc_value <- auc(roc_obj)
print(paste("AUC:", auc_value))
test.df = read.csv("data/test_data_4r.csv")
library(caret)
test.df$stroke<-ifelse(test.df$stroke=="Yes",1,0)
predictions = predict(stepwise_model, test.df, type="response")
roc_obj <- roc(y_true, predictions)
y_pred = factor(ifelse(predictions > 0.5, T, F))
y_true = factor(ifelse(test.df$stroke == 1, T, F))
confusionMatrix(y_pred, y_true, positive="TRUE")
auc_value <- auc(roc_obj)
cat("AUC:", auc_value)
